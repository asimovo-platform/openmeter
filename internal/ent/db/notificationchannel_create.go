// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/internal/ent/db/notificationchannel"
	"github.com/openmeterio/openmeter/internal/ent/db/notificationrule"
	"github.com/openmeterio/openmeter/internal/notification"
)

// NotificationChannelCreate is the builder for creating a NotificationChannel entity.
type NotificationChannelCreate struct {
	config
	mutation *NotificationChannelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (ncc *NotificationChannelCreate) SetNamespace(s string) *NotificationChannelCreate {
	ncc.mutation.SetNamespace(s)
	return ncc
}

// SetCreatedAt sets the "created_at" field.
func (ncc *NotificationChannelCreate) SetCreatedAt(t time.Time) *NotificationChannelCreate {
	ncc.mutation.SetCreatedAt(t)
	return ncc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ncc *NotificationChannelCreate) SetNillableCreatedAt(t *time.Time) *NotificationChannelCreate {
	if t != nil {
		ncc.SetCreatedAt(*t)
	}
	return ncc
}

// SetUpdatedAt sets the "updated_at" field.
func (ncc *NotificationChannelCreate) SetUpdatedAt(t time.Time) *NotificationChannelCreate {
	ncc.mutation.SetUpdatedAt(t)
	return ncc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ncc *NotificationChannelCreate) SetNillableUpdatedAt(t *time.Time) *NotificationChannelCreate {
	if t != nil {
		ncc.SetUpdatedAt(*t)
	}
	return ncc
}

// SetDeletedAt sets the "deleted_at" field.
func (ncc *NotificationChannelCreate) SetDeletedAt(t time.Time) *NotificationChannelCreate {
	ncc.mutation.SetDeletedAt(t)
	return ncc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ncc *NotificationChannelCreate) SetNillableDeletedAt(t *time.Time) *NotificationChannelCreate {
	if t != nil {
		ncc.SetDeletedAt(*t)
	}
	return ncc
}

// SetType sets the "type" field.
func (ncc *NotificationChannelCreate) SetType(nt notification.ChannelType) *NotificationChannelCreate {
	ncc.mutation.SetType(nt)
	return ncc
}

// SetName sets the "name" field.
func (ncc *NotificationChannelCreate) SetName(s string) *NotificationChannelCreate {
	ncc.mutation.SetName(s)
	return ncc
}

// SetDisabled sets the "disabled" field.
func (ncc *NotificationChannelCreate) SetDisabled(b bool) *NotificationChannelCreate {
	ncc.mutation.SetDisabled(b)
	return ncc
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (ncc *NotificationChannelCreate) SetNillableDisabled(b *bool) *NotificationChannelCreate {
	if b != nil {
		ncc.SetDisabled(*b)
	}
	return ncc
}

// SetConfig sets the "config" field.
func (ncc *NotificationChannelCreate) SetConfig(nc notification.ChannelConfig) *NotificationChannelCreate {
	ncc.mutation.SetConfig(nc)
	return ncc
}

// SetID sets the "id" field.
func (ncc *NotificationChannelCreate) SetID(s string) *NotificationChannelCreate {
	ncc.mutation.SetID(s)
	return ncc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ncc *NotificationChannelCreate) SetNillableID(s *string) *NotificationChannelCreate {
	if s != nil {
		ncc.SetID(*s)
	}
	return ncc
}

// AddRuleIDs adds the "rules" edge to the NotificationRule entity by IDs.
func (ncc *NotificationChannelCreate) AddRuleIDs(ids ...string) *NotificationChannelCreate {
	ncc.mutation.AddRuleIDs(ids...)
	return ncc
}

// AddRules adds the "rules" edges to the NotificationRule entity.
func (ncc *NotificationChannelCreate) AddRules(n ...*NotificationRule) *NotificationChannelCreate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ncc.AddRuleIDs(ids...)
}

// Mutation returns the NotificationChannelMutation object of the builder.
func (ncc *NotificationChannelCreate) Mutation() *NotificationChannelMutation {
	return ncc.mutation
}

// Save creates the NotificationChannel in the database.
func (ncc *NotificationChannelCreate) Save(ctx context.Context) (*NotificationChannel, error) {
	ncc.defaults()
	return withHooks(ctx, ncc.sqlSave, ncc.mutation, ncc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ncc *NotificationChannelCreate) SaveX(ctx context.Context) *NotificationChannel {
	v, err := ncc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncc *NotificationChannelCreate) Exec(ctx context.Context) error {
	_, err := ncc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncc *NotificationChannelCreate) ExecX(ctx context.Context) {
	if err := ncc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncc *NotificationChannelCreate) defaults() {
	if _, ok := ncc.mutation.CreatedAt(); !ok {
		v := notificationchannel.DefaultCreatedAt()
		ncc.mutation.SetCreatedAt(v)
	}
	if _, ok := ncc.mutation.UpdatedAt(); !ok {
		v := notificationchannel.DefaultUpdatedAt()
		ncc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ncc.mutation.Disabled(); !ok {
		v := notificationchannel.DefaultDisabled
		ncc.mutation.SetDisabled(v)
	}
	if _, ok := ncc.mutation.ID(); !ok {
		v := notificationchannel.DefaultID()
		ncc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ncc *NotificationChannelCreate) check() error {
	if _, ok := ncc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "NotificationChannel.namespace"`)}
	}
	if v, ok := ncc.mutation.Namespace(); ok {
		if err := notificationchannel.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "NotificationChannel.namespace": %w`, err)}
		}
	}
	if _, ok := ncc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "NotificationChannel.created_at"`)}
	}
	if _, ok := ncc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "NotificationChannel.updated_at"`)}
	}
	if _, ok := ncc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "NotificationChannel.type"`)}
	}
	if v, ok := ncc.mutation.GetType(); ok {
		if err := notificationchannel.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "NotificationChannel.type": %w`, err)}
		}
	}
	if _, ok := ncc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "NotificationChannel.name"`)}
	}
	if v, ok := ncc.mutation.Name(); ok {
		if err := notificationchannel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "NotificationChannel.name": %w`, err)}
		}
	}
	if _, ok := ncc.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New(`db: missing required field "NotificationChannel.config"`)}
	}
	if v, ok := ncc.mutation.Config(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "config", err: fmt.Errorf(`db: validator failed for field "NotificationChannel.config": %w`, err)}
		}
	}
	return nil
}

func (ncc *NotificationChannelCreate) sqlSave(ctx context.Context) (*NotificationChannel, error) {
	if err := ncc.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := ncc.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, ncc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected NotificationChannel.ID type: %T", _spec.ID.Value)
		}
	}
	ncc.mutation.id = &_node.ID
	ncc.mutation.done = true
	return _node, nil
}

func (ncc *NotificationChannelCreate) createSpec() (*NotificationChannel, *sqlgraph.CreateSpec, error) {
	var (
		_node = &NotificationChannel{config: ncc.config}
		_spec = sqlgraph.NewCreateSpec(notificationchannel.Table, sqlgraph.NewFieldSpec(notificationchannel.FieldID, field.TypeString))
	)
	_spec.OnConflict = ncc.conflict
	if id, ok := ncc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ncc.mutation.Namespace(); ok {
		_spec.SetField(notificationchannel.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := ncc.mutation.CreatedAt(); ok {
		_spec.SetField(notificationchannel.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ncc.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationchannel.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ncc.mutation.DeletedAt(); ok {
		_spec.SetField(notificationchannel.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ncc.mutation.GetType(); ok {
		_spec.SetField(notificationchannel.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ncc.mutation.Name(); ok {
		_spec.SetField(notificationchannel.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ncc.mutation.Disabled(); ok {
		_spec.SetField(notificationchannel.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := ncc.mutation.Config(); ok {
		vv, err := notificationchannel.ValueScanner.Config.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(notificationchannel.FieldConfig, field.TypeString, vv)
		_node.Config = value
	}
	if nodes := ncc.mutation.RulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   notificationchannel.RulesTable,
			Columns: notificationchannel.RulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec, nil
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationChannel.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationChannelUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (ncc *NotificationChannelCreate) OnConflict(opts ...sql.ConflictOption) *NotificationChannelUpsertOne {
	ncc.conflict = opts
	return &NotificationChannelUpsertOne{
		create: ncc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationChannel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ncc *NotificationChannelCreate) OnConflictColumns(columns ...string) *NotificationChannelUpsertOne {
	ncc.conflict = append(ncc.conflict, sql.ConflictColumns(columns...))
	return &NotificationChannelUpsertOne{
		create: ncc,
	}
}

type (
	// NotificationChannelUpsertOne is the builder for "upsert"-ing
	//  one NotificationChannel node.
	NotificationChannelUpsertOne struct {
		create *NotificationChannelCreate
	}

	// NotificationChannelUpsert is the "OnConflict" setter.
	NotificationChannelUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationChannelUpsert) SetUpdatedAt(v time.Time) *NotificationChannelUpsert {
	u.Set(notificationchannel.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationChannelUpsert) UpdateUpdatedAt() *NotificationChannelUpsert {
	u.SetExcluded(notificationchannel.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationChannelUpsert) SetDeletedAt(v time.Time) *NotificationChannelUpsert {
	u.Set(notificationchannel.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationChannelUpsert) UpdateDeletedAt() *NotificationChannelUpsert {
	u.SetExcluded(notificationchannel.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationChannelUpsert) ClearDeletedAt() *NotificationChannelUpsert {
	u.SetNull(notificationchannel.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *NotificationChannelUpsert) SetName(v string) *NotificationChannelUpsert {
	u.Set(notificationchannel.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NotificationChannelUpsert) UpdateName() *NotificationChannelUpsert {
	u.SetExcluded(notificationchannel.FieldName)
	return u
}

// SetDisabled sets the "disabled" field.
func (u *NotificationChannelUpsert) SetDisabled(v bool) *NotificationChannelUpsert {
	u.Set(notificationchannel.FieldDisabled, v)
	return u
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *NotificationChannelUpsert) UpdateDisabled() *NotificationChannelUpsert {
	u.SetExcluded(notificationchannel.FieldDisabled)
	return u
}

// ClearDisabled clears the value of the "disabled" field.
func (u *NotificationChannelUpsert) ClearDisabled() *NotificationChannelUpsert {
	u.SetNull(notificationchannel.FieldDisabled)
	return u
}

// SetConfig sets the "config" field.
func (u *NotificationChannelUpsert) SetConfig(v notification.ChannelConfig) *NotificationChannelUpsert {
	u.Set(notificationchannel.FieldConfig, v)
	return u
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *NotificationChannelUpsert) UpdateConfig() *NotificationChannelUpsert {
	u.SetExcluded(notificationchannel.FieldConfig)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NotificationChannel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationchannel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationChannelUpsertOne) UpdateNewValues() *NotificationChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(notificationchannel.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(notificationchannel.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(notificationchannel.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(notificationchannel.FieldType)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationChannel.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NotificationChannelUpsertOne) Ignore() *NotificationChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationChannelUpsertOne) DoNothing() *NotificationChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationChannelCreate.OnConflict
// documentation for more info.
func (u *NotificationChannelUpsertOne) Update(set func(*NotificationChannelUpsert)) *NotificationChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationChannelUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationChannelUpsertOne) SetUpdatedAt(v time.Time) *NotificationChannelUpsertOne {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationChannelUpsertOne) UpdateUpdatedAt() *NotificationChannelUpsertOne {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationChannelUpsertOne) SetDeletedAt(v time.Time) *NotificationChannelUpsertOne {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationChannelUpsertOne) UpdateDeletedAt() *NotificationChannelUpsertOne {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationChannelUpsertOne) ClearDeletedAt() *NotificationChannelUpsertOne {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *NotificationChannelUpsertOne) SetName(v string) *NotificationChannelUpsertOne {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NotificationChannelUpsertOne) UpdateName() *NotificationChannelUpsertOne {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.UpdateName()
	})
}

// SetDisabled sets the "disabled" field.
func (u *NotificationChannelUpsertOne) SetDisabled(v bool) *NotificationChannelUpsertOne {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *NotificationChannelUpsertOne) UpdateDisabled() *NotificationChannelUpsertOne {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.UpdateDisabled()
	})
}

// ClearDisabled clears the value of the "disabled" field.
func (u *NotificationChannelUpsertOne) ClearDisabled() *NotificationChannelUpsertOne {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.ClearDisabled()
	})
}

// SetConfig sets the "config" field.
func (u *NotificationChannelUpsertOne) SetConfig(v notification.ChannelConfig) *NotificationChannelUpsertOne {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *NotificationChannelUpsertOne) UpdateConfig() *NotificationChannelUpsertOne {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.UpdateConfig()
	})
}

// Exec executes the query.
func (u *NotificationChannelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for NotificationChannelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationChannelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NotificationChannelUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: NotificationChannelUpsertOne.ID is not supported by MySQL driver. Use NotificationChannelUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NotificationChannelUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NotificationChannelCreateBulk is the builder for creating many NotificationChannel entities in bulk.
type NotificationChannelCreateBulk struct {
	config
	err      error
	builders []*NotificationChannelCreate
	conflict []sql.ConflictOption
}

// Save creates the NotificationChannel entities in the database.
func (nccb *NotificationChannelCreateBulk) Save(ctx context.Context) ([]*NotificationChannel, error) {
	if nccb.err != nil {
		return nil, nccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nccb.builders))
	nodes := make([]*NotificationChannel, len(nccb.builders))
	mutators := make([]Mutator, len(nccb.builders))
	for i := range nccb.builders {
		func(i int, root context.Context) {
			builder := nccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationChannelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = nccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nccb *NotificationChannelCreateBulk) SaveX(ctx context.Context) []*NotificationChannel {
	v, err := nccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nccb *NotificationChannelCreateBulk) Exec(ctx context.Context) error {
	_, err := nccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nccb *NotificationChannelCreateBulk) ExecX(ctx context.Context) {
	if err := nccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationChannel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationChannelUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (nccb *NotificationChannelCreateBulk) OnConflict(opts ...sql.ConflictOption) *NotificationChannelUpsertBulk {
	nccb.conflict = opts
	return &NotificationChannelUpsertBulk{
		create: nccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationChannel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nccb *NotificationChannelCreateBulk) OnConflictColumns(columns ...string) *NotificationChannelUpsertBulk {
	nccb.conflict = append(nccb.conflict, sql.ConflictColumns(columns...))
	return &NotificationChannelUpsertBulk{
		create: nccb,
	}
}

// NotificationChannelUpsertBulk is the builder for "upsert"-ing
// a bulk of NotificationChannel nodes.
type NotificationChannelUpsertBulk struct {
	create *NotificationChannelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NotificationChannel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationchannel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationChannelUpsertBulk) UpdateNewValues() *NotificationChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(notificationchannel.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(notificationchannel.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(notificationchannel.FieldCreatedAt)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(notificationchannel.FieldType)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationChannel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NotificationChannelUpsertBulk) Ignore() *NotificationChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationChannelUpsertBulk) DoNothing() *NotificationChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationChannelCreateBulk.OnConflict
// documentation for more info.
func (u *NotificationChannelUpsertBulk) Update(set func(*NotificationChannelUpsert)) *NotificationChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationChannelUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationChannelUpsertBulk) SetUpdatedAt(v time.Time) *NotificationChannelUpsertBulk {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationChannelUpsertBulk) UpdateUpdatedAt() *NotificationChannelUpsertBulk {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *NotificationChannelUpsertBulk) SetDeletedAt(v time.Time) *NotificationChannelUpsertBulk {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *NotificationChannelUpsertBulk) UpdateDeletedAt() *NotificationChannelUpsertBulk {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *NotificationChannelUpsertBulk) ClearDeletedAt() *NotificationChannelUpsertBulk {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *NotificationChannelUpsertBulk) SetName(v string) *NotificationChannelUpsertBulk {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NotificationChannelUpsertBulk) UpdateName() *NotificationChannelUpsertBulk {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.UpdateName()
	})
}

// SetDisabled sets the "disabled" field.
func (u *NotificationChannelUpsertBulk) SetDisabled(v bool) *NotificationChannelUpsertBulk {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.SetDisabled(v)
	})
}

// UpdateDisabled sets the "disabled" field to the value that was provided on create.
func (u *NotificationChannelUpsertBulk) UpdateDisabled() *NotificationChannelUpsertBulk {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.UpdateDisabled()
	})
}

// ClearDisabled clears the value of the "disabled" field.
func (u *NotificationChannelUpsertBulk) ClearDisabled() *NotificationChannelUpsertBulk {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.ClearDisabled()
	})
}

// SetConfig sets the "config" field.
func (u *NotificationChannelUpsertBulk) SetConfig(v notification.ChannelConfig) *NotificationChannelUpsertBulk {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *NotificationChannelUpsertBulk) UpdateConfig() *NotificationChannelUpsertBulk {
	return u.Update(func(s *NotificationChannelUpsert) {
		s.UpdateConfig()
	})
}

// Exec executes the query.
func (u *NotificationChannelUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the NotificationChannelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for NotificationChannelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationChannelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
